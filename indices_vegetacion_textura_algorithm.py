# -*- coding: utf-8 -*-

"""
/***************************************************************************
 IndicesVegetacionTextura
                                 A QGIS plugin
 Índices de vegetación y textura
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-19
        copyright            : (C) 2022 by Manuel Vargas
        email                : mfvargas@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Manuel Vargas'
__date__ = '2022-09-19'
__copyright__ = '(C) 2022 by Manuel Vargas'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
import processing
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterNumber,                       
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterRasterDestination)


class IndicesVegetacionTexturaAlgorithm(QgsProcessingAlgorithm):
    """
    Índices de vegetación y textura.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    IMAGE_NORMALIZED = 'IMAGE_NORMALIZED'
    IMAGE_NDVI = 'IMAGE_NDVI'
    IMAGE_HARALICK = 'IMAGE_HARALICK'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.IMAGE_NORMALIZED,
                self.tr('Imagen con normalización radiométrica')
            )
        )        

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.IMAGE_NDVI,
                self.tr("NDVI")
            )
        )         

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.IMAGE_HARALICK,
                self.tr("Índices de textura de Haralick")
            )
        )         


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieving parameters
        image_normalized = self.parameterAsRasterLayer(parameters, self.IMAGE_NORMALIZED, context)        
        image_ndvi = self.parameterAsOutputLayer(parameters, self.IMAGE_NDVI, context)
        image_haralick = self.parameterAsOutputLayer(parameters, self.IMAGE_HARALICK, context)        
                    
        output_image_ndvi = processing.run(
            "otb:BandMath", 
            {'il': image_normalized, 
             'out': image_ndvi,
             'exp': "(im1b4-im1b3)/(im1b4+im1b3)", 
             'outputpixeltype': 5}, 
            context=context, 
            feedback=feedback)
        output_image_ndvi = output_image_ndvi['out']

        output_image_haralick = processing.run(
            "otb:HaralickTextureExtraction", 
            {'in': image_normalized,
             'channel': 4,
             'parameters.min': 0,
             'parameters.max': 1,
             'texture': 'advanced',
             'out': image_haralick}, 
            context=context, 
            feedback=feedback)
        output_image_haralick = output_image_haralick['out']

        
        return {self.IMAGE_NDVI: image_ndvi, self.IMAGE_HARALICK: image_haralick}

        

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Índices de vegetación y textura'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'REDD+ Costa Rica'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IndicesVegetacionTexturaAlgorithm()
